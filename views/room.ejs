<!DOCTYPE html>
<html>
  <title>Virtual Room</title>
  <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-L2H7WQ45LP"></script>
<script src="https://kit.fontawesome.com/e3e687a25f.js" crossorigin="anonymous"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-L2H7WQ45LP');
</script>
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css"
  integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<link href="/css/style.css" rel="stylesheet" type="text/css">
<script>
  const roomName = "<%= roomName %>"
</script>

<body>
  <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
  <div class="main-container">
    <div class="side-container1">
      <div id="link-input">
        <input type="url" id="youtubes" placeholder="paste the videoId">
        <button id="link-Submit" onclick="playAnothervideo()" type="submit">submit</button>
      </div>
      <div id="player"></div>
      <div id="playerController">
        <button id="playVideo" type="button" class="btn btn-default" aria-label="Left Align">
          <span class="glyphicon glyphicon-play" aria-hidden="true"></span>
        </button>
        <button id="pauseVideo" type="button" class="btn btn-default" aria-label="Left Align">
          <span class="glyphicon glyphicon-pause" aria-hidden="true"></span>
        </button>
        <div id="playerLine">
          <div id="line"></div>
          <div id="square"></div>
        </div>
      </div>
    </div>
    <div class="Text-Feature">
      <div id="message-container"></div>
      <form id="send-container">
        <input class="msg-input" type="text" required id="message-input">
        <button class="msg-btn" type="submit" id="send-button">Send</button>
    </div>
  </div>
</body>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>

<script src="https://cdn.socket.io/socket.io-3.0.1.min.js"></script>

<script>
  // var scrollButton = document.getElementById("scrollBtn")
  // var container = document.getElementById("message-container")
  // scrollButton.click(function(){
  //   container.scrollTop(container[0].scrollHeight)
  // })
  // const socket = io('http://localhost:3001')

  function initliazeButtons() {
    var playButton = $('#playVideo')
    var pauseButton = $('#pauseVideo')
    playButton.click(function (event) {
      mydata = { state: 'play', time: player.getCurrentTime() };
      socket.emit('event', mydata)
    })
    pauseButton.click(function (event) {
      mydata = { state: 'pause', time: player.getCurrentTime() };
      socket.emit('event', mydata)
    })
  }

  function progressBarLoop() {
    let progressBar = document.getElementById("playerLine")
    var progressBarsquare = document.getElementById("square");
    var videoLength = player.getDuration();
    progressBar.addEventListener('click', function (event) {
      var thisClickoffSet = $(this).offset();
      var seekTo = (event.pageX - thisClickoffSet.left) / 600 * videoLength;
      var mydata = { state: 'play', time: seekTo }
      socket.emit('event', mydata)
      // console.log(thisClickoffSet)
    })
    setInterval(function () {
      if (player == null || progressBar == null) {
        return;
      }
      var fraction = player.getCurrentTime() / player.getDuration() * 100;
      document.getElementById("square").style.left = (fraction.toString() + "%");
    }, 200)
  }
      // progressBarLoop();
</script>

<script>

  // 2. This code loads the IFrame Player API code asynchronously.
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  // 3. This function creates an <iframe> (and YouTube player)
  //    after the API code downloads.
  // var player;
  function onYouTubeIframeAPIReady() {
    console.log("Api is ready")
    player = new YT.Player('player', {
      height: '390',
      width: '640',
      videoId: 'H5v3kku4y6Q',
      playerVars: {
        'controls': 0,
        'disablekb': 1,
        'modestbranding': 1,
        'rel': 0,
        'showinfo': 0,
        'autoplay': 0
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }

  // 4. The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    initliazeButtons();
    progressBarLoop();
    event.target.playVideo();
  }
  // 5. The API calls this function when the player's state changes.
  //    The function indicates that when playing a video (state=1),
  //    the player should play for six seconds and then stop.
  var done = false;
  function onPlayerStateChange(event) {
    console.log(event.data)
    console.log(event.target.getCurrentTime());
    if (event.data == YT.PlayerState.PLAYING && !done) {
      setTimeout(stopVideo, 600000);
      done = true;
    }
  }
  function playVideo() {
    player.playVideo();
  }
  function stopVideo() {
    player.stopVideo();
  }
  function pauseVideo() {
    player.pauseVideo();
  }
  function seekTo(seconds) {
    player.seekTo(seconds)
  }

  var player;
  function playThisvideo(vidId) {
    // var vidId = document.getElementById("youtubes").innerText
    if (player) {
      player.destroy();
    }
    player = new YT.Player('player', {
      height: '390',
      width: '640',
      videoId: vidId,
      playerVars: {
        'controls': 0,
        'disablekb': 1,
        'modestbranding': 1,
        'rel': 0,
        'showinfo': 0
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }


  function playAnothervideo() {
    var vidId = document.getElementById("youtubes").value;
    playThisvideo(vidId);
  }
</script>

<!-- <script src="https://cdn.socket.io/socket.io-3.0.1.min.js"></script> -->
<script>
  var socket = io()
  socket.on('event', (msg) => {
    if (msg.state == 'play') {
      if (Math.abs(msg.time - player.getCurrentTime()) > 1) {
        seekTo(msg.time)
      }
      playVideo();
    } else if (msg.state == 'pause') {
      pauseVideo();
    }

  }
  )
</script>
<script>
  const messageContainer = document.getElementById('message-container')
  const messageForm = document.getElementById('send-container')
  const messageInput = document.getElementById('message-input')

  const name = prompt('What is your name?')
  appendMessage('You joined')
  socket.emit('new-user', roomName, name)



  socket.on('chat-message', data => {
    appendMessage(`${data.name}: ${data.message}`)
  })

  socket.on('user-connected', name => {
    appendMessage(`${name} connected`)
  })

  socket.on('user-disconnected', name => {
    appendMessage(`${name} disconnected`)
  })

  messageForm.addEventListener('submit', e => {
    e.preventDefault()
    const message = messageInput.value
    appendMessage(`You: ${message}`)
    socket.emit('send-chat-message', roomName, message)
    messageInput.value = ''
  })

  function appendMessage(message) {
    const messageElement = document.createElement('div')
    messageElement.innerText = message
    messageContainer.append(messageElement)
  }
</script>

</html>